<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add Rental - DriveBidRent</title>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap");

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Montserrat", sans-serif;
      }

      body {
        background-color: #ffffff;
        color: #333333;
      }

      /* Seller Dashboard Content */
      .seller-dashboard {
        padding: 4rem 2rem;
        max-width: 1200px;
        margin: 0 auto;
      }

      .seller-dashboard h1 {
        color: #ff6b00;
        font-size: 2.5rem;
        margin-bottom: 2rem;
        text-align: center;
      }

      .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
      }

      .dashboard-card {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .dashboard-card h2 {
        color: #ff6b00;
        font-size: 1.5rem;
        margin-bottom: 1rem;
      }

      .dashboard-card p {
        margin-bottom: 1.5rem;
        color: #666666;
      }

      .card-btn {
        display: inline-block;
        background: linear-gradient(135deg, #ff6b00, #ff9a44);
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 0.5rem;
        text-decoration: none;
        font-weight: 500;
        transition: background 0.3s ease;
        margin: 0.5rem;
      }

      .card-btn:hover {
        background: linear-gradient(135deg, #ff9a44, #ff6b00);
      }

      /* Forms */
      .add-auction,
      .add-rental {
        padding: 4rem 2rem;
        max-width: 1200px;
        margin: 0 auto;
      }

      .add-auction h1,
      .add-rental h1 {
        color: #ff6b00;
        font-size: 2.5rem;
        margin-bottom: 2rem;
        text-align: center;
      }

      form {
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 1rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        margin: 0 auto;
      }

      form label {
        display: block;
        margin-bottom: 0.5rem;
        color: #333333;
        font-weight: 500;
      }

      form input,
      form select,
      form textarea {
        width: 100%;
        padding: 0.75rem;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        font-size: 1rem;
      }

      form textarea {
        resize: vertical;
        min-height: 100px;
      }

      .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: -0.75rem;
        margin-bottom: 0.75rem;
        display: none;
      }

      .submit-btn {
        display: block;
        width: 100%;
        background: linear-gradient(135deg, #ff6b00, #ff9a44);
        color: white;
        padding: 0.75rem;
        border: none;
        border-radius: 0.5rem;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .submit-btn:hover,
      .submit-btn:disabled {
        background: linear-gradient(135deg, #ff9a44, #ff6b00);
      }

      .submit-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
      }

      /* Alert Messages */
      .alert {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
        text-align: center;
      }

      .alert-danger {
        background-color: #ffe5e5;
        color: #ff0000;
        border: 1px solid #ffcccc;
      }

      .alert-success {
        background-color: #e5ffe5;
        color: #008000;
        border: 1px solid #ccffcc;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .dashboard-cards {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>
  <body>
    <%- include('partials/navbar', { currentPage: 'add-rental' }) %>

    <section class="add-rental">
      <h1>Add Vehicle for Rent</h1>
      
      <% if (error) { %>
        <div class="alert alert-danger">
          <%= error %>
        </div>
      <% } %>
      
      <% if (success) { %>
        <div class="alert alert-success">
          <%= success %>
        </div>
      <% } %>
      
      <form id="rental-form" enctype="multipart/form-data">
        <label for="vehicle-name">Vehicle Name:</label>
        <input 
          type="text" 
          id="vehicle-name" 
          name="vehicle-name" 
          value="<%= formData['vehicle-name'] || '' %>"
          required 
        />
        <div id="vehicle-name-error" class="error-message">Vehicle name is required and should be at least 2 characters.</div>

        <label for="vehicle-image">Vehicle Image:</label>
        <input 
          type="file" 
          id="vehicle-image" 
          name="vehicleImage" 
          required 
          accept="image/*"
        />
        <div id="vehicle-image-error" class="error-message">Please upload a valid image file.</div>

        <label for="vehicle-year">Year:</label>
        <input 
          type="number" 
          id="vehicle-year" 
          name="vehicle-year" 
          value="<%= formData['vehicle-year'] || '' %>"
          required 
          min="1900"
          max="2025"
        />
        <div id="vehicle-year-error" class="error-message">Year must be between 1900 and 2025.</div>

        <label for="vehicle-ac">AC:</label>
        <select id="vehicle-ac" name="vehicle-ac" required>
          <option value="">Select AC Availability</option>
          <option value="available" <%= formData['vehicle-ac'] === 'available' ? 'selected' : '' %>>Available</option>
          <option value="not" <%= formData['vehicle-ac'] === 'not' ? 'selected' : '' %>>Not Available</option>
        </select>
        <div id="vehicle-ac-error" class="error-message">Please select AC availability.</div>

        <label for="vehicle-capacity">Capacity (passengers):</label>
        <input 
          type="number" 
          id="vehicle-capacity" 
          name="vehicle-capacity" 
          value="<%= formData['vehicle-capacity'] || '' %>"
          required 
          min="1"
        />
        <div id="vehicle-capacity-error" class="error-message">Capacity must be at least 1 passenger.</div>
        
        <label for="vehicle-condition">Condition:</label>
        <select id="vehicle-condition" name="vehicle-condition" required>
          <option value="">Select Condition</option>
          <option value="excellent" <%= formData['vehicle-condition'] === 'excellent' ? 'selected' : '' %>>Excellent</option>
          <option value="good" <%= formData['vehicle-condition'] === 'good' ? 'selected' : '' %>>Good</option>
          <option value="fair" <%= formData['vehicle-condition'] === 'fair' ? 'selected' : '' %>>Fair</option>
        </select>
        <div id="vehicle-condition-error" class="error-message">Please select a vehicle condition.</div>

        <label for="vehicle-fuel-type">Fuel Type:</label>
        <select id="vehicle-fuel-type" name="vehicle-fuel-type" required>
          <option value="">Select Fuel Type</option>
          <option value="petrol" <%= formData['vehicle-fuel-type'] === 'petrol' ? 'selected' : '' %>>Petrol</option>
          <option value="diesel" <%= formData['vehicle-fuel-type'] === 'diesel' ? 'selected' : '' %>>Diesel</option>
        </select>
        <div id="vehicle-fuel-type-error" class="error-message">Please select a fuel type.</div>

        <label for="vehicle-transmission">Transmission:</label>
        <select id="vehicle-transmission" name="vehicle-transmission" required>
          <option value="">Select Transmission</option>
          <option value="automatic" <%= formData['vehicle-transmission'] === 'automatic' ? 'selected' : '' %>>Automatic</option>
          <option value="manual" <%= formData['vehicle-transmission'] === 'manual' ? 'selected' : '' %>>Manual</option>
        </select>
        <div id="vehicle-transmission-error" class="error-message">Please select a transmission type.</div>

        <label for="rental-cost">Cost/day (₹):</label>
        <input 
          type="number" 
          id="rental-cost" 
          name="rental-cost" 
          value="<%= formData['rental-cost'] || '' %>"
          required 
          min="0"
        />
        <div id="rental-cost-error" class="error-message">Cost must be a positive amount.</div>

        <label for="driver-available">Driver Available:</label>
        <select id="driver-available" name="driver-available" required>
          <option value="">Select Driver Availability</option>
          <option value="yes" <%= formData['driver-available'] === 'yes' ? 'selected' : '' %>>Yes</option>
          <option value="no" <%= formData['driver-available'] === 'no' ? 'selected' : '' %>>No</option>
        </select>
        <div id="driver-available-error" class="error-message">Please select driver availability.</div>

        <div id="driver-rate-container" style="display: none;">
          <label for="driver-rate">Driver Rate (₹/day):</label>
          <input 
            type="number" 
            id="driver-rate" 
            name="driver-rate" 
            value="<%= formData['driver-rate'] || '' %>"
          />
          <div id="driver-rate-error" class="error-message">Driver rate must be a positive amount if driver is available.</div>
        </div>

        <button type="submit" class="submit-btn" id="submit-btn">Submit</button>
      </form>
    </section>

    <%- include('partials/footer') %>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('rental-form');
        const submitBtn = document.getElementById('submit-btn');

        // Set initial state for driver rate field
        const driverAvailable = document.getElementById('driver-available');
        const driverRateContainer = document.getElementById('driver-rate-container');
        if (driverAvailable.value === 'yes') {
          driverRateContainer.style.display = 'block';
          document.getElementById('driver-rate').setAttribute('required', 'required');
        }

        // Validation function
        const validateForm = () => {
          let isValid = true;

          // Vehicle Name
          const vehicleName = document.getElementById('vehicle-name').value.trim();
          const vehicleNameError = document.getElementById('vehicle-name-error');
          if (vehicleName.length < 2) {
            vehicleNameError.style.display = 'block';
            isValid = false;
          } else {
            vehicleNameError.style.display = 'none';
          }

          // Vehicle Image
          const vehicleImage = document.getElementById('vehicle-image').files[0];
          const vehicleImageError = document.getElementById('vehicle-image-error');
          if (!vehicleImage || !vehicleImage.type.startsWith('image/')) {
            vehicleImageError.style.display = 'block';
            isValid = false;
          } else {
            vehicleImageError.style.display = 'none';
          }

          // Vehicle Year
          const vehicleYear = parseInt(document.getElementById('vehicle-year').value);
          const vehicleYearError = document.getElementById('vehicle-year-error');
          const currentYear = new Date().getFullYear(); // 2025
          if (vehicleYear < 1900 || vehicleYear > currentYear) {
            vehicleYearError.style.display = 'block';
            isValid = false;
          } else {
            vehicleYearError.style.display = 'none';
          }

          // AC Availability
          const vehicleAc = document.getElementById('vehicle-ac').value;
          const vehicleAcError = document.getElementById('vehicle-ac-error');
          if (!vehicleAc) {
            vehicleAcError.style.display = 'block';
            isValid = false;
          } else {
            vehicleAcError.style.display = 'none';
          }

          // Vehicle Capacity
          const vehicleCapacity = parseInt(document.getElementById('vehicle-capacity').value);
          const vehicleCapacityError = document.getElementById('vehicle-capacity-error');
          if (vehicleCapacity < 1) {
            vehicleCapacityError.style.display = 'block';
            isValid = false;
          } else {
            vehicleCapacityError.style.display = 'none';
          }

          // Vehicle Condition
          const vehicleCondition = document.getElementById('vehicle-condition').value;
          const vehicleConditionError = document.getElementById('vehicle-condition-error');
          if (!vehicleCondition) {
            vehicleConditionError.style.display = 'block';
            isValid = false;
          } else {
            vehicleConditionError.style.display = 'none';
          }

          // Fuel Type
          const vehicleFuelType = document.getElementById('vehicle-fuel-type').value;
          const vehicleFuelTypeError = document.getElementById('vehicle-fuel-type-error');
          if (!vehicleFuelType) {
            vehicleFuelTypeError.style.display = 'block';
            isValid = false;
          } else {
            vehicleFuelTypeError.style.display = 'none';
          }

          // Transmission
          const vehicleTransmission = document.getElementById('vehicle-transmission').value;
          const vehicleTransmissionError = document.getElementById('vehicle-transmission-error');
          if (!vehicleTransmission) {
            vehicleTransmissionError.style.display = 'block';
            isValid = false;
          } else {
            vehicleTransmissionError.style.display = 'none';
          }

          // Rental Cost
          const rentalCost = parseInt(document.getElementById('rental-cost').value);
          const rentalCostError = document.getElementById('rental-cost-error');
          if (rentalCost <= 0) {
            rentalCostError.style.display = 'block';
            isValid = false;
          } else {
            rentalCostError.style.display = 'none';
          }

          // Driver Availability
          const driverAvailableValue = document.getElementById('driver-available').value;
          const driverAvailableError = document.getElementById('driver-available-error');
          if (!driverAvailableValue) {
            driverAvailableError.style.display = 'block';
            isValid = false;
          } else {
            driverAvailableError.style.display = 'none';
          }

          // Driver Rate (if applicable)
          const driverRate = document.getElementById('driver-rate');
          const driverRateError = document.getElementById('driver-rate-error');
          if (driverAvailableValue === 'yes' && (!driverRate.value.trim() || parseInt(driverRate.value) <= 0)) {
            driverRateError.style.display = 'block';
            isValid = false;
          } else {
            driverRateError.style.display = 'none';
          }

          submitBtn.disabled = !isValid;
          return isValid;
        };

        // Real-time validation
        ['vehicle-name', 'vehicle-image', 'vehicle-year', 'vehicle-ac', 'vehicle-capacity', 'vehicle-condition', 
         'vehicle-fuel-type', 'vehicle-transmission', 'rental-cost', 'driver-available'].forEach(id => {
          const element = document.getElementById(id);
          element.addEventListener('input', validateForm);
          if (element.type === 'file') {
            element.addEventListener('change', validateForm);
          }
        });
        document.getElementById('driver-rate').addEventListener('input', validateForm);

        // Show/hide driver rate field based on driver availability
        driverAvailable.addEventListener('change', () => {
          if (driverAvailable.value === 'yes') {
            driverRateContainer.style.display = 'block';
            document.getElementById('driver-rate').setAttribute('required', 'required');
          } else {
            driverRateContainer.style.display = 'none';
            document.getElementById('driver-rate').removeAttribute('required');
            document.getElementById('driver-rate-error').style.display = 'none';
          }
          validateForm();
        });

        // Form submission
        form.addEventListener('submit', async (e) => {
          e.preventDefault();

          if (!validateForm()) {
            alert('Please fix the errors in the form.');
            return;
          }

          submitBtn.disabled = true;
          submitBtn.textContent = 'Submitting...';

          const formData = new FormData(form);

          try {
            const response = await fetch('/seller_dashboard/add-rental', {
              method: 'POST',
              body: formData
            });

            const result = await response.json();

            if (response.ok && result.success) {
              alert('Rental added successfully!');
              form.reset();
              if (result.redirect) window.location.href = result.redirect;
            } else {
              alert(result.message || 'Error adding rental. Please try again.');
            }
          } catch (error) {
            alert('Network error. Please try again.');
            console.error('Fetch error:', error);
          } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Submit';
            validateForm(); // Re-validate to reset error states
          }
        });
      });
    </script>
  </body>
</html>