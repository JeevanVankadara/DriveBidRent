<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifications - DriveBidRent</title>
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800;900&display=swap");

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Montserrat", sans-serif;
        }

        body {
            background-color: #f8f9fa;
            color: #333333;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #ff6b00;
        }

        .page-header h1 {
            color: #ff6b00;
            font-size: 2.5rem;
        }

        .mark-all-read {
            background-color: #ff6b00;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .mark-all-read:hover {
            background-color: #e65c00;
        }

        .mark-all-read:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .notifications-container {
            display: grid;
            gap: 1rem;
        }

        .notification-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #ff6b00;
            transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.3s ease;
            display: flex;
            align-items: flex-start;
            gap: 1rem;
        }

        .notification-card.removing {
            opacity: 0;
            transform: translateX(-20px);
        }

        .notification-card:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .notification-card.unread {
            background-color: #fff9f5;
            border-left-color: #ff6b00;
        }

        .notification-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .icon-outbid {
            background-color: #fef2f2;
            color: #ef4444;
        }

        .icon-auction_ended {
            background-color: #f3f4f6;
            color: #6b7280;
        }

        .icon-auction_won {
            background-color: #e7f7ef;
            color: #10b981;
        }

        .icon-new_auction {
            background-color: #fefce8;
            color: #eab308;
        }

        .notification-content {
            flex: 1;
        }

        .notification-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
        }

        .notification-message {
            color: #666;
            line-height: 1.5;
            margin-bottom: 0.5rem;
        }

        .notification-time {
            color: #999;
            font-size: 0.9rem;
        }

        .notification-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.3rem;
            text-decoration: none;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #ff6b00;
            color: white;
        }

        .btn-primary:hover {
            background-color: #e65c00;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #545b62;
        }

        .no-notifications {
            text-align: center;
            padding: 3rem;
            color: #666;
            display: none;
        }

        .no-notifications.visible {
            display: block;
        }

        .no-notifications h3 {
            margin-bottom: 1rem;
            color: #ff6b00;
        }

        .unread-badge {
            background-color: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: 600;
            margin-left: 0.5rem;
        }

        .alert-message {
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 0.5rem;
            font-weight: 500;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .alert-message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .alert-success {
            background-color: #d1fae5;
            color: #065f46;
            border: 1px solid #a7f3d0;
        }

        .alert-error {
            background-color: #fee2e2;
            color: #991b1b;
            border: 1px solid #fecaca;
        }

        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .page-header {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .notification-card {
                flex-direction: column;
                gap: 1rem;
            }

            .notification-actions {
                justify-content: flex-start;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="container">
        <div class="page-header">
            <h1>Notifications</h1>
            <button class="mark-all-read" id="markAllRead" <%= notifications.length === 0 ? 'disabled' : '' %>>
                Clear All Notifications
            </button>
        </div>

        <div id="messageContainer"></div>

        <div class="notifications-container" id="notificationsContainer">
            <% if (notifications && notifications.length > 0) { %>
                <% notifications.forEach(notification => { %>
                    <div class="notification-card <%= notification.isRead ? '' : 'unread' %>" data-notification-id="<%= notification._id %>">
                        <div class="notification-icon icon-<%= notification.type %>">
                            <% if (notification.type === 'outbid') { %>
                                ‚ö°
                            <% } else if (notification.type === 'auction_ended') { %>
                                ‚è∞
                            <% } else if (notification.type === 'auction_won') { %>
                                üèÜ
                            <% } else { %>
                                üîî
                            <% } %>
                        </div>
                        <div class="notification-content">
                            <div class="notification-title"><%= notification.title %></div>
                            <div class="notification-message"><%= notification.message %></div>
                            <div class="notification-time">
                                <%= new Date(notification.createdAt).toLocaleString() %>
                            </div>
                            <% if (notification.auctionId && notification.type === 'outbid') { %>
                                <div class="notification-actions">
                                    <a href="/buyer_dashboard?page=auction&id=<%= notification.auctionId._id %>" class="btn btn-primary">
                                        View Auction
                                    </a>
                                    <a href="/buyer_dashboard?page=auction&id=<%= notification.auctionId._id %>" class="btn btn-secondary">
                                        Place New Bid
                                    </a>
                                </div>
                            <% } else if (notification.auctionId && notification.type === 'auction_won') { %>
                                <div class="notification-actions">
                                    <a href="/purchase" class="btn btn-primary">
                                        Go to My Purchases
                                    </a>
                                </div>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-notifications visible">
                    <h3>No Notifications</h3>
                    <p>You don't have any notifications yet.</p>
                </div>
            <% } %>
        </div>
    </div>

    <%- include('partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Mark notification as read when clicked
            document.querySelectorAll('.notification-card.unread').forEach(card => {
                card.addEventListener('click', function() {
                    const notificationId = this.getAttribute('data-notification-id');
                    
                    fetch(`/notifications/${notificationId}/read`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.classList.remove('unread');
                            updateUnreadCount();
                        }
                    })
                    .catch(error => {
                        console.error('Error marking notification as read:', error);
                    });
                });
            });

            // Clear all notifications
            document.getElementById('markAllRead').addEventListener('click', function() {
                if (this.disabled) return;
                
                if (!confirm('Are you sure you want to clear all notifications? This action cannot be undone.')) {
                    return;
                }
                
                // Disable button during request
                this.disabled = true;
                this.textContent = 'Clearing...';
                
                fetch('/notifications/mark-all-read', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message
                        showMessage('All notifications have been cleared successfully!', 'success');
                        
                        // Remove all notifications with animation
                        removeAllNotifications();
                        
                        // Update button state
                        this.disabled = true;
                        this.textContent = 'Clear All Notifications';
                        
                        // Update unread count
                        updateUnreadCount();
                    } else {
                        showMessage('Failed to clear notifications', 'error');
                        this.disabled = false;
                        this.textContent = 'Clear All Notifications';
                    }
                })
                .catch(error => {
                    console.error('Error clearing all notifications:', error);
                    showMessage('Error clearing notifications', 'error');
                    this.disabled = false;
                    this.textContent = 'Clear All Notifications';
                });
            });

            function removeAllNotifications() {
                const notificationCards = document.querySelectorAll('.notification-card');
                const notificationsContainer = document.getElementById('notificationsContainer');
                const noNotifications = document.querySelector('.no-notifications');
                
                if (notificationCards.length === 0) return;
                
                // Add removing class to each card for animation
                notificationCards.forEach(card => {
                    card.classList.add('removing');
                });
                
                // Remove cards after animation completes
                setTimeout(() => {
                    notificationCards.forEach(card => {
                        card.remove();
                    });
                    
                    // Show "no notifications" message
                    if (noNotifications) {
                        noNotifications.classList.add('visible');
                    }
                }, 300);
            }

            function showMessage(message, type) {
                const messageContainer = document.getElementById('messageContainer');
                
                // Remove existing message if any
                messageContainer.innerHTML = '';
                
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert-message alert-${type}`;
                alertDiv.textContent = message;
                
                messageContainer.appendChild(alertDiv);
                
                // Trigger animation
                setTimeout(() => {
                    alertDiv.classList.add('show');
                }, 10);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    alertDiv.classList.remove('show');
                    setTimeout(() => {
                        if (alertDiv.parentNode) {
                            alertDiv.remove();
                        }
                    }, 300);
                }, 5000);
            }

            function updateUnreadCount() {
                fetch('/api/notifications/unread-count')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update navbar badge if it exists
                            const badge = document.querySelector('.notification-badge');
                            if (badge) {
                                if (data.unreadCount > 0) {
                                    badge.textContent = data.unreadCount;
                                    badge.style.display = 'flex';
                                } else {
                                    badge.style.display = 'none';
                                }
                            }
                        }
                    });
            }
        });
    </script>
</body>
</html>