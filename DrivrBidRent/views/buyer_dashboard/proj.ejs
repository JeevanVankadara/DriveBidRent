<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DriveBidRent - Buyer Dashboard</title>
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800;900&display=swap");

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Montserrat", sans-serif;
        }

        body {
            background-color: #ffffff;
            color: #333333;
        }

        
        .heading1 {
            width: 100%; /* Full width for a modern banner look */
            height: 400px; /* Adjusted height for the image */
            margin: 0 auto 50px auto;
                
            /* Background Image Settings */
            background-image: url('/images/car1001.png'); /* 👈 YOUR IMAGE HERE */
            background-color: #333333; /* Fallback color */
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
                
            position: relative;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
            border-bottom: 5px solid #ff6b00;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        /* Image Overlay for Readability */
        .heading1::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.45); /* Darker overlay for better white text contrast */
            z-index: 1; 
        }

        .heading1 h1, .heading1 p {
            position: relative;
            z-index: 2;
            color: #ffffff;
        }

        .heading1 h1 {
            font-family: "Montserrat", sans-serif;
            font-size: 56px; /* Increased font size for more impact */
            font-weight: 800; /* Made it bolder */
            letter-spacing: -1px;
            transition: color 0.3s ease-in-out, text-shadow 0.3s ease-in-out;
            margin-bottom: 10px;
            color: #ffffff;
        }

        .heading1 p {
            font-family: "Montserrat", sans-serif; /* Consistent font family */
            line-height: 1.5;
            font-size: 22px; 
            font-weight: 500;
            color: #f0f0f0; /* Slightly off-white for description */
            margin-top: 5px;
        }

        .heading1 h1:hover {
            color: #ff6b00; /* Orange on hover */
            text-shadow: 0px 0px 10px rgba(255, 255, 255, 0.7); /* Subtle glow */
        }

        .oneL {
            color: #ff6b00;
            font-family: "Montserrat", sans-serif;
            font-weight: 900;
        }

        /* Sections */
        section {
            padding: 4rem 2rem;
            max-width: 1200px;
            margin: 0 auto;
            position: relative;
            overflow: hidden;
        }

        section::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background: linear-gradient(90deg, #ff6b00, #ff9a44, transparent);
        }

        section h2 {
            color: #ff6b00;
            font-size: 2rem;
            text-align: center;
            margin-bottom: 2rem;
        }

        .card-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 2rem;
        }

        /* Auctions Section Heading */
        .auctions h2 {
            color: #ff6b00;
            font-size: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            padding-top: 1rem;
            padding-bottom: 1rem;
            line-height: 1.5;
        }

        /* Rentals Section Heading */
        .rentals h2 {
            color: #ff6b00;
            font-size: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            padding-top: 1rem;
            padding-bottom: 1rem;
            line-height: 1.5;
        }

        /* Car Cards - Consistent Size */
        .car-card {
            background-color: #ffffff;
            border-radius: 1rem;
            padding: 1.5rem;
            position: relative;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: 1px solid #ff6b00;
            height: 550px;
            display: flex;
            flex-direction: column;
        }

        .car-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 10px 20px rgba(255, 107, 0, 0.3);
        }

        .hot-tag, .new-tag {
            position: absolute;
            top: 1rem;
            left: 1rem;
            background-color: #ff6b00;
            color: white;
            padding: 2px 15px;
            border-radius: 10px;
            font-size: 15px;
            font-weight: 400;
        }

        .heart-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: #ccc;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .heart-btn[data-liked="true"] {
            color: #ff6b00;
        }

        .car-card img {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
        }

        .car-card h3 {
            font-size: 1.3rem;
            margin-bottom: 0.5rem;
            color: #ff6b00;
        }

        .auction-date, .rental-cost, .costperday {
            color: #666666;
            margin-bottom: 1rem;
        }

        .car-details {
            background-color: #f9f9f9;
            padding: 1rem;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            flex-grow: 1;
        }

        .car-details p {
            margin-bottom: 0.5rem;
            color: #333333;
        }

        .button-container {
            display: flex;
            justify-content: space-between;
        }

        .details-btn {
            display: inline-block;
            background-color: #ff6b00;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.3rem;
            text-decoration: none;
            transition: background-color 0.3s ease;
            flex: 1;
            margin-right: 0.5rem;
            text-align: center;
        }

        .placebid-btn, .bid-btn {
            display: inline-block;
            background-color: #ff6b00;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.3rem;
            text-decoration: none;
            transition: background-color 0.3s ease;
            flex: 1;
            margin-left: 0.5rem;
            text-align: center;
        }

        .placebid-btn:hover,
        .bid-btn:hover,
        .details-btn:hover {
            background-color: #e65c00;
        }

        /* More Button Container */
        .more-btn-container {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
        }

        /* More Button */
        .more-btn {
            display: inline-block;
            background-color: #ff6b00;
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 0.3rem;
            text-decoration: none;
            font-weight: 500;
            transition: background-color 0.3s ease;
            text-align: center;
        }

        .more-btn:hover {
            background-color: #e65c00;
        }

        /* No Items Message */
        .no-items {
            text-align: center;
            grid-column: 1 / -1;
            padding: 2rem;
            color: #666;
            font-size: 1.2rem;
        }

        /* Notification Toast Styles */
        .notification-toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b00;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 10px;
            max-width: 350px;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            cursor: pointer;
        }
        
        .notification-toast.show {
            transform: translateX(0);
        }
        
        .notification-toast .icon {
            font-size: 1.2rem;
        }
        
        .notification-toast .message {
            flex: 1;
            font-weight: 500;
        }
        
        .notification-toast .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        @media (max-width: 768px) {
            /* Responsive Design for heading1 */
            .heading1 {
                height: 300px; /* Adjusted height for mobile */
                margin-bottom: 30px;
            }
            
            .heading1 h1 {
                font-size: 40px;
            }

            .heading1 p {
                font-size: 18px;
            }
            
            .card-container {
                grid-template-columns: 1fr;
            }
            
            .button-container {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .details-btn,
            .placebid-btn,
            .bid-btn {
                margin: 0;
                width: 100%;
            }

            /* Notification Toast Mobile */
            .notification-toast {
                top: 10px;
                right: 10px;
                left: 10px;
                max-width: none;
                transform: translateY(-100px);
            }
            
            .notification-toast.show {
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="heading1">
        <h1><strong class="oneL">D</strong>rive<strong class="oneL">B</strong>id<strong class="oneL">R</strong>ent</h1> 
        <p>Buy or Rent—Drive Your Dream with <strong class="oneL">Ease!</strong></p>
    </div>

    <section class="auctions">
        <h2>Featured Auctions</h2>
        <div class="card-container">
            <% if (featuredAuctions && featuredAuctions.length > 0) { %>
                <% featuredAuctions.forEach(auction => { %>
                    <div class="car-card">
                        <span class="hot-tag">Hot</span>
                        <button class="heart-btn" data-liked="false" data-auction-id="<%= auction._id %>">❤</button>
                        <img src="<%= auction.vehicleImage %>" alt="<%= auction.vehicleName %>">
                        <h3><%= auction.vehicleName %></h3>
                        <p class="auction-date">Auction started on: <strong><%= new Date(auction.auctionDate).toLocaleDateString() %></strong></p>
                        <div class="car-details">
                            <p><strong>Year:</strong> <%= auction.year %></p>
                            <p><strong>Mileage:</strong> <%= auction.mileage %> km</p>
                            <p><strong>Condition:</strong> <%= auction.condition.charAt(0).toUpperCase() + auction.condition.slice(1) %></p>
                            <p><strong>Starting Price:</strong> ₹<%= auction.startingBid.toLocaleString() %></p>
                        </div>
                        <div class="button-container">
                            <a href="/buyer_dashboard?page=auction&id=<%= auction._id %>" class="details-btn">Details</a>
                            <a href="/buyer_dashboard?page=auction&id=<%= auction._id %>" class="bid-btn">Place Bid</a>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-items">
                    <p>No auctions available at the moment.</p>
                </div>
            <% } %>
        </div>
        <div class="more-btn-container">
            <a href="/buyer_dashboard?page=auctions" class="more-btn">More Auctions</a>
        </div>
    </section>

    <section class="rentals">
        <h2>Featured Rentals</h2>
        <div class="card-container">
            <% if (featuredRentals && featuredRentals.length > 0) { %>
                <% const displayedRentals = featuredRentals.slice(0, 3); %>
                <% displayedRentals.forEach(rental => { %>
                    <div class="car-card">
                        <% if (new Date() - rental.createdAt < 7 * 24 * 60 * 60 * 1000) { %>
                            <span class="new-tag">New</span>
                        <% } %>
                        <button class="heart-btn" data-liked="false" data-rental-id="<%= rental._id %>">❤</button>
                        <img src="<%= rental.vehicleImage %>" alt="<%= rental.vehicleName %>">
                        <h3><%= rental.vehicleName %></h3>
                        <p class="rental-cost">Cost/day: <strong>₹<%= rental.costPerDay %></strong></p>
                        <div class="car-details">
                            <p><strong>Year:</strong> <%= rental.year %></p>
                            <p><strong>AC:</strong> <%= rental.AC === 'available' ? 'Yes' : 'No' %></p>
                            <p><strong>Capacity:</strong> <%= rental.capacity %> passengers</p>
                            <p><strong>Seller:</strong> <%= rental.sellerId.firstName %> <%= rental.sellerId.lastName %></p>
                            <% if (rental.driverAvailable) { %>
                                <p><strong>Driver:</strong> Yes (₹<%= rental.driverRate %>/day)</p>
                            <% } %>
                        </div>
                        <div class="button-container">
                            <a href="/buyer_dashboard?page=rental&id=<%= rental._id %>" class="details-btn">Details</a>
                            <a href="/buyer_dashboard?page=rental&id=<%= rental._id %>" class="placebid-btn">Rent Now</a>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-items">
                    <p>No featured rentals available at the moment.</p>
                </div>
            <% } %>
        </div>
        <div class="more-btn-container">
            <a href="/buyer_dashboard?page=rentals" class="more-btn">More Rentals</a>
        </div>
    </section>

    <%- include('partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize wishlist status
            initializeWishlistStatus();
            
            // Add event listeners to heart buttons
            document.querySelectorAll('.heart-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const isLiked = this.getAttribute('data-liked') === 'true';
                    const rentalId = this.getAttribute('data-rental-id');
                    const auctionId = this.getAttribute('data-auction-id');
                    
                    // Toggle liked state
                    this.setAttribute('data-liked', !isLiked);
                    this.style.color = !isLiked ? '#ff6b00' : '#ccc';
                    
                    // Store in localStorage for persistence between page reloads
                    if (auctionId) {
                        localStorage.setItem(`auction_${auctionId}_liked`, !isLiked ? 'true' : 'false');
                    } else if (rentalId) {
                        localStorage.setItem(`rental_${rentalId}_liked`, !isLiked ? 'true' : 'false');
                    }
                    
                    // Send request to server
                    fetch('/api/wishlist', {
                        method: isLiked ? 'DELETE' : 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ 
                            rentalId: rentalId || null,
                            auctionId: auctionId || null,
                            type: rentalId ? 'rental' : 'auction'
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            // If operation failed, revert the button state
                            this.setAttribute('data-liked', isLiked);
                            this.style.color = isLiked ? '#ff6b00' : '#ccc';
                            
                            // Revert localStorage
                            if (auctionId) {
                                localStorage.setItem(`auction_${auctionId}_liked`, isLiked ? 'true' : 'false');
                            } else if (rentalId) {
                                localStorage.setItem(`rental_${rentalId}_liked`, isLiked ? 'true' : 'false');
                            }
                            
                            console.error('Wishlist operation failed:', data.message);
                        }
                    })
                    .catch(error => {
                        // If there was an error, revert the button state
                        this.setAttribute('data-liked', isLiked);
                        this.style.color = isLiked ? '#ff6b00' : '#ccc';
                        
                        // Revert localStorage
                        if (auctionId) {
                            localStorage.setItem(`auction_${auctionId}_liked`, isLiked ? 'true' : 'false');
                        } else if (rentalId) {
                            localStorage.setItem(`rental_${rentalId}_liked`, isLiked ? 'true' : 'false');
                        }
                        
                        console.error('Error:', error);
                    });
                });
            });

            // Check for unread notifications on page load
            checkNotifications();
        });
    
        // Initialize heart buttons based on wishlist
        function initializeWishlistStatus() {          
            // Then fetch server data to ensure consistency
            fetch('/api/wishlist')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Set heart buttons for rentals
                        document.querySelectorAll('.heart-btn[data-rental-id]').forEach(button => {
                            const rentalId = button.getAttribute('data-rental-id');
                            const isLiked = data.wishlist.rentals && data.wishlist.rentals.includes(rentalId);
                            
                            // Update localStorage to match server
                            localStorage.setItem(`rental_${rentalId}_liked`, isLiked ? 'true' : 'false');
                            
                            // Update button state
                            button.setAttribute('data-liked', isLiked);
                            button.style.color = isLiked ? '#ff6b00' : '#ccc';
                        });
                        
                        // Set heart buttons for auctions
                        document.querySelectorAll('.heart-btn[data-auction-id]').forEach(button => {
                            const auctionId = button.getAttribute('data-auction-id');
                            const isLiked = data.wishlist.auctions && data.wishlist.auctions.includes(auctionId);
                            
                            // Update localStorage to match server
                            localStorage.setItem(`auction_${auctionId}_liked`, isLiked ? 'true' : 'false');
                            
                            // Update button state
                            button.setAttribute('data-liked', isLiked);
                            button.style.color = isLiked ? '#ff6b00' : '#ccc';
                        });
                    }
                })
                .catch(error => {
                    console.error('Error loading wishlist:', error);
                    // We already set states from localStorage, so no need for fallback
                });
        }

        // Check for unread notifications
        function checkNotifications() {
            fetch('/api/notifications/unread-count')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.unreadCount > 0) {
                        // Update navbar badge
                        updateNavbarBadge(data.unreadCount);
                        
                        // Show toast notification
                        showNotificationToast(data.unreadCount);
                    }
                })
                .catch(error => {
                    console.error('Error checking notifications:', error);
                });
        }

        function updateNavbarBadge(unreadCount) {
            const badge = document.querySelector('.notification-badge');
            if (badge) {
                badge.textContent = unreadCount;
                badge.style.display = 'flex';
            }
        }

        function showNotificationToast(unreadCount) {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = 'notification-toast';
            toast.innerHTML = `
                <div class="icon">🔔</div>
                <div class="message">
                    You have ${unreadCount} new notification${unreadCount > 1 ? 's' : ''}
                </div>
                <button class="close-btn">&times;</button>
            `;
            
            // Add to page
            document.body.appendChild(toast);
            
            // Show toast with animation
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            // Close button functionality
            const closeBtn = toast.querySelector('.close-btn');
            closeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                hideToast(toast);
            });
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                hideToast(toast);
            }, 5000);
            
            // Click on toast to go to notifications
            toast.addEventListener('click', (e) => {
                if (e.target !== closeBtn) {
                    window.location.href = '/notifications';
                }
            });
        }

        function hideToast(toast) {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        }
    </script>
</body>
</html>